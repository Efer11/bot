from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

class SupportState(StatesGroup):
    waiting_for_question = State()
    waiting_for_reply = State()

support_router = Router()

@support_router.message(Command("print_support"))
async def ask_support_question(message: Message, state: FSMContext):
    await message.answer(
        "üì© –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —Å —á–µ–º –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º! "
        "–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. ‚è≥"
    )
    await state.set_state(SupportState.waiting_for_question)

@support_router.message(SupportState.waiting_for_question)
async def forward_to_support(message: Message, state: FSMContext):
    support_chat_id = 975278531
    reply_button = InlineKeyboardButton(
        text="–û—Ç–≤–µ—Ç–∏—Ç—å",
        callback_data=f"reply_{message.from_user.id}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[reply_button]])

    await message.bot.send_message(
        chat_id=support_chat_id,
        text=f"‚úâÔ∏è –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n\n"
             f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n{message.text}",
        reply_markup=keyboard
    )

    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. ‚è≥")
    await state.clear()

@support_router.callback_query(F.data.startswith("reply_"))
async def ask_for_reply(call: CallbackQuery, state: FSMContext):
    user_id = int(call.data.split("_")[1])
    await state.update_data(user_id=user_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await state.set_state(SupportState.waiting_for_reply)

@support_router.message(SupportState.waiting_for_reply)
async def send_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    await message.bot.send_message(
        chat_id=user_id,
        text=f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
    )

    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    await state.clear()
