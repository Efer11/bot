from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database.database import (
    register_printer, get_all_printers, toggle_printer_status,
    get_printer_status, get_printer_info, add_review, get_average_rating
)

router = Router()


class RegisterPrinter(StatesGroup):
    room_number = State()
    price_per_page = State()
    description = State()
    card_number = State()


class PrinterSelection(StatesGroup):
    choosing_importance = State()
    choosing_type = State()


user_printer_selection = {}

printer_types = {
    "printer_type_laser_bw": "–õ–∞–∑–µ—Ä–Ω—ã–π —á/–±",
    "printer_type_laser_color": "–õ–∞–∑–µ—Ä–Ω—ã–π —á/–± + —Ü–≤–µ—Ç",
    "printer_type_laser_bw_scan": "–õ–∞–∑–µ—Ä–Ω—ã–π —á/–± + —Å–∫–∞–Ω",
    "printer_type_laser_color_scan": "–õ–∞–∑–µ—Ä–Ω—ã–π —á/–± + —Ü–≤–µ—Ç + —Å–∫–∞–Ω",
    "printer_type_ink_bw": "–°—Ç—Ä—É–π–Ω—ã–π —á/–±",
    "printer_type_ink_color": "–°—Ç—Ä—É–π–Ω—ã–π —á/–± + —Ü–≤–µ—Ç",
    "printer_type_ink_bw_scan": "–°—Ç—Ä—É–π–Ω—ã–π —á/–± + —Å–∫–∞–Ω",
    "printer_type_ink_color_scan": "–°—Ç—Ä—É–π–Ω—ã–π —á/–± + —Ü–≤–µ—Ç + —Å–∫–∞–Ω"
}

# üîπ –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@router.callback_query(F.data == "print")
async def print_callback(call: CallbackQuery, state: FSMContext):
    await call.message.delete()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, –≤–∞–∂–Ω–æ", callback_data="print_type_needed")],
            [InlineKeyboardButton(text="–ù–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data="printer_show_all")]
        ]
    )

    await call.message.answer("–í–∞–∂–Ω–æ –ª–∏ –≤–∞–º, –∫–∞–∫–æ–π —Ç–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?", reply_markup=keyboard)
    await state.set_state(PrinterSelection.choosing_importance)


# üîπ –ï—Å–ª–∏ —Ç–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤–∞–∂–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
@router.callback_query(F.data == "print_type_needed")
async def choose_printer_type(call: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"select_type_{key}")]
            for key, name in printer_types.items()
        ]
    )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞:", reply_markup=keyboard)
    await state.set_state(PrinterSelection.choosing_type)


# üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é)
@router.callback_query(F.data.startswith("select_type_"))
async def filter_printers_by_type(call: CallbackQuery):
    selected_key = call.data.replace("select_type_", "")  # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–∏–ø–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    selected_type = printer_types.get(selected_key)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    if not selected_type:
        await call.message.edit_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    printers = await get_all_printers()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    filtered_printers = [p for p in printers if p.get("printer_type") and selected_type in p["printer_type"]]

    if not filtered_printers:
        await call.message.edit_text("–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    printer_list_text = "\n\n".join([
        f"üë§ {p['full_name']} | üè† {p['room_number']} | üí∞ {p['price_per_page']} —Ä—É–±.\nüñ® {p['printer_type']}"
        for p in filtered_printers
    ])

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{p['full_name']}", callback_data=f"printer_{p['chat_id']}")]
            for p in filtered_printers
        ]
    )

    await call.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–µ—á–∞—Ç–∏:\n\n{printer_list_text}", reply_markup=keyboard)


# üîπ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
@router.callback_query(F.data == "printer_show_all")
async def show_all_printers(call: CallbackQuery):
    printers = await get_all_printers()

    if not printers:
        await call.message.edit_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    printer_list_text = "\n\n".join([
        f"üë§ {p['full_name']} | üè† {p['room_number']} | üí∞ {p['price_per_page']} —Ä—É–±.\nüñ® {p['printer_type']}"
        for p in printers
    ])

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{p['full_name']}", callback_data=f"printer_{p['chat_id']}")]
            for p in printers
        ]
    )

    await call.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–µ—á–∞—Ç–∏:\n\n{printer_list_text}", reply_markup=keyboard)


# üîπ –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("printer_"))
async def select_printer(call: CallbackQuery, bot: Bot):
    printer_chat_id = int(call.data.split("_")[1])
    user_printer_selection[call.from_user.id] = printer_chat_id

    printer_info = await bot.get_chat(printer_chat_id)

    view_profile_btn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_profile_{printer_chat_id}")]
        ]
    )

    await call.message.delete()
    await call.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏.\n"
        "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã .pdf —Ñ–æ—Ä–º–∞—Ç–∞.\n"
        f"–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –õ–° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è - @{printer_info.username or printer_info.full_name}",
        reply_markup=view_profile_btn
    )


# üîπ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("view_profile_"))
async def view_profile(call: CallbackQuery):
    printer_id = int(call.data.split("_")[2])
    info = await get_printer_info(printer_id)

    if not info:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    avg_rating = await get_average_rating(printer_id)

    cancel_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="cancel")]
        ]
    )

    await call.message.answer(
        f"üë§ {info['full_name']}\n"
        f"üè† –ö–æ–º–Ω–∞—Ç–∞: {info['room_number']}\n"
        f"üñ® –¢–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {info['printer_type']}\n"
        f"üí∞ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Å—Ç: {info['price_per_page']} —Ä—É–±.\n"
        f"üìå –û–ø–∏—Å–∞–Ω–∏–µ: {info['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating}",
        reply_markup=cancel_button
    )

@router.callback_query(F.data == "cancel")
async def cancel(call: CallbackQuery):
    await call.message.delete()


# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@router.callback_query(F.data == "printer")
async def printer_callback(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id

    status = await get_printer_status(user_id)
    if status is not None:
        await call.message.edit_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã, –≥–¥–µ –í—ã –±—É–¥–µ—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 114/3):")
    await state.set_state(RegisterPrinter.room_number)


@router.message(RegisterPrinter.room_number)
async def room_number_handler(message: Message, state: FSMContext):
    await state.update_data(room_number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –æ–¥–∏–Ω –ª–∏—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.25):")
    await state.set_state(RegisterPrinter.price_per_page)


@router.message(RegisterPrinter.price_per_page)
async def price_per_page_handler(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price_per_page=price)
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö —É—Å–ª—É–≥:")
        await state.set_state(RegisterPrinter.description)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.25")


@router.message(RegisterPrinter.card_number)
async def card_number_handler(message: Message, state: FSMContext):
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.clear()
