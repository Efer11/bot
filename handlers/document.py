import logging
import fitz
import time
from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.callback import user_printer_selection
from database.database import get_printer_room, get_printer_info, add_review, get_average_rating, update_printer_stats

router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PrintRequest(StatesGroup):
    waiting_print_type = State()
    waiting_for_requirements = State()

class PaymentState(StatesGroup):
    choosing_payment_method = State()
    entering_cash_amount = State()

class RatingState(StatesGroup):
    waiting_for_comment = State()

async def get_pdf_page_count(file_id, bot):
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_bytes = await bot.download_file(file_path)

        with fitz.open("pdf", file_bytes.read()) as doc:
            return len(doc)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        return 0


@router.message(F.document)
async def handle_document(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in user_printer_selection:
        await message.answer("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–∞.")
        return

    printer_id = user_printer_selection[user_id]
    printer_info = await get_printer_info(printer_id)

    if not printer_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not message.document.file_name.lower().endswith(".pdf"):
        await message.answer("‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
        return

    page_count = await get_pdf_page_count(message.document.file_id, message.bot)
    if page_count == 0:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    data = await state.get_data()
    documents = data.get("documents", [])

    await state.update_data(printer_id=printer_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
    documents.append(
        {"file_id": message.document.file_id, "file_name": message.document.file_name, "pages": page_count, "print_type": None}
    )
    await state.update_data(documents=documents)

    if len(documents) == 3:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—Å–µ —Ñ–∞–π–ª—ã –ß/–ë", callback_data="all_bw")],
            [InlineKeyboardButton(text="–í—Å–µ —Ñ–∞–π–ª—ã –¶–≤–µ—Ç", callback_data="all_color")],
            [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ", callback_data="choose_each")],
        ])
        await message.answer(
            "–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ 3 –∏–ª–∏ –±–æ–ª–µ–µ —Ñ–∞–π–ª–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ä–∞–∑—É –∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ:",
            reply_markup=keyboard
        )
    elif len(documents) < 3:
        await ask_print_type_for_file(message, len(documents) - 1, state)

async def ask_print_type_for_file(message: Message, index: int, state: FSMContext):
    data = await state.get_data()
    documents = data.get("documents", [])

    if index >= len(documents):
        return

    doc = documents[index]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß/–ë", callback_data=f"bw_{index}")],
        [InlineKeyboardButton(text="–¶–≤–µ—Ç", callback_data=f"color_{index}")],
    ])

    await message.answer(
        f"üìÑ {doc['file_name']} ({doc['pages']} —Å—Ç—Ä.)\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "all_bw")
async def set_all_bw(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    documents = data.get("documents", [])
    printer_info = await get_printer_info(data.get("printer_id"))

    if not printer_info:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ.")
        return

    price_per_page = printer_info.get("price_per_page", 0.25)  # –¶–µ–Ω–∞ –∑–∞ –ß/–ë —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_pages = 0
    total_price = 0
    summary_message = ""

    for doc in documents:
        doc["print_type"] = "bw"
        doc["cost"] = round(doc["pages"] * price_per_page, 2)  # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_pages += doc["pages"]
        total_price += doc["cost"]

        summary_message += (
            f"üìÑ –§–∞–π–ª: {doc['file_name']}\n"
            f"üìë –°—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–∞–π–ª–µ: {doc['pages']}\n"
            f"üé® –§–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏: –ß/–ë\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞: {doc['cost']} —Ä—É–±.\n\n"
        )

    summary_message += (
        f"üìä –û–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç:\n"
        f"üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n"
        f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞—Å–ø–µ—á–∞—Ç–∫–µ.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.\n"
        "–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ñ–∞–π–ª, –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–Ω–æ–≤–∞."
    )

    await state.update_data(documents=documents, total_pages=total_pages, total_price=total_price)
    await call.message.answer(summary_message)
    await call.message.delete()
    await call.answer()
    await state.set_state(PrintRequest.waiting_for_requirements)



@router.callback_query(F.data == "all_color")
async def set_all_color(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    documents = data.get("documents", [])
    printer_info = await get_printer_info(data.get("printer_id"))

    if not printer_info:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ.")
        return

    price_per_page_color = printer_info.get("price_per_page_color", 0.6)
    total_pages = 0
    total_price = 0
    summary_message = ""

    for doc in documents:
        doc["print_type"] = "color"
        doc["cost"] = round(doc["pages"] * price_per_page_color, 2)
        total_pages += doc["pages"]
        total_price += doc["cost"]

        summary_message += (
            f"üìÑ –§–∞–π–ª: {doc['file_name']}\n"
            f"üìë –°—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–∞–π–ª–µ: {doc['pages']}\n"
            f"üé® –§–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏: –¶–≤–µ—Ç\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞: {doc['cost']} —Ä—É–±.\n\n"
        )

    summary_message += (
        f"üìä –û–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç:\n"
        f"üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n"
        f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞—Å–ø–µ—á–∞—Ç–∫–µ.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.\n"
        "–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ñ–∞–π–ª, –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–Ω–æ–≤–∞."
    )

    await state.update_data(documents=documents, total_pages=total_pages, total_price=total_price)
    await call.message.answer(summary_message)
    await call.message.delete()
    await call.answer()
    await state.set_state(PrintRequest.waiting_for_requirements)

@router.callback_query(F.data == "choose_each")
async def choose_each_file(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    documents = data.get("documents", [])

    for index, doc in enumerate(documents):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ß/–ë", callback_data=f"bw_{index}")],
            [InlineKeyboardButton(text="–¶–≤–µ—Ç", callback_data=f"color_{index}")],
        ])

        await call.message.answer(
            f"üìÑ {doc['file_name']} ({doc['pages']} —Å—Ç—Ä.)\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏:",
            reply_markup=keyboard
        )

    await call.message.delete()
    await call.answer()


@router.callback_query(F.data == "back_to_upload")
async def back_to_upload(call: CallbackQuery, state: FSMContext):
    await state.update_data(documents=[])
    await call.message.answer("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏.")
    await call.message.delete()
    await call.answer()


async def update_total_price(state: FSMContext):
    data = await state.get_data()
    documents = data.get("documents", [])

    total_price = round(sum(float(doc.get("cost", 0)) for doc in documents), 2)
    total_pages = sum(doc.get("pages", 0) for doc in documents)

    await state.update_data(total_pages=total_pages, total_price=total_price)

@router.callback_query(F.data.startswith("bw_"))
async def choose_bw(call: CallbackQuery, state: FSMContext):
    index = int(call.data.split("_")[1])
    data = await state.get_data()
    documents = data.get("documents", [])

    if index >= len(documents):
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    printer_id = data.get("printer_id")
    printer_info = await get_printer_info(printer_id)

    if not printer_info:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ.")
        return

    price_per_page = printer_info.get("price_per_page", 0.25)

    documents[index]["print_type"] = "bw"
    documents[index]["cost"] = round(documents[index]["pages"] * price_per_page, 2)

    await state.update_data(documents=documents)
    await update_total_price(state)

    # ‚úÖ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.delete()

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updated_data = await state.get_data()
    total_pages = updated_data.get("total_pages", 0)
    total_price = updated_data.get("total_price", 0)

    await call.message.answer(
        f"üìÑ –§–∞–π–ª {documents[index]['file_name']} –ø—Ä–∏–Ω—è—Ç.\n"
        f"üìë –°—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–∞–π–ª–µ: {documents[index]['pages']}\n"
        f"üé® –§–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏: –ß/–ë\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞: {documents[index]['cost']} —Ä—É–±.\n\n"
        f"üìä –û–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç:\n"
        f"üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n"
        f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞—Å–ø–µ—á–∞—Ç–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π."
        "–ï—Å–ª–∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ñ–∞–π–ª, –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–Ω–æ–≤–∞."
    )
    await call.answer()
    await state.set_state(PrintRequest.waiting_for_requirements)


@router.callback_query(F.data.startswith("color_"))
async def choose_color(call: CallbackQuery, state: FSMContext):
    index = int(call.data.split("_")[1])
    data = await state.get_data()
    documents = data.get("documents", [])

    if index >= len(documents):
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    printer_id = data.get("printer_id")
    printer_info = await get_printer_info(printer_id)

    if not printer_info:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ.")
        return

    price_per_page_color = printer_info.get("price_per_page_color", 0.6)

    documents[index]["print_type"] = "color"
    documents[index]["cost"] = round(documents[index]["pages"] * price_per_page_color, 2)

    await state.update_data(documents=documents)
    await update_total_price(state)

    # ‚úÖ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.delete()

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updated_data = await state.get_data()
    total_pages = updated_data.get("total_pages", 0)
    total_price = updated_data.get("total_price", 0)

    await call.message.answer(
        f"üìÑ –§–∞–π–ª {documents[index]['file_name']} –ø—Ä–∏–Ω—è—Ç.\n"
        f"üìë –°—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–∞–π–ª–µ: {documents[index]['pages']}\n"
        f"üé® –§–æ—Ä–º–∞—Ç –ø–µ—á–∞—Ç–∏: –¶–≤–µ—Ç\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞: {documents[index]['cost']} —Ä—É–±.\n\n"
        f"üìä –û–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç:\n"
        f"üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n"
        f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞—Å–ø–µ—á–∞—Ç–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ —É –í–∞—Å –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π."
        "–ï—Å–ª–∏ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ñ–∞–π–ª, –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–Ω–æ–≤–∞."
    )
    await call.answer()
    await state.set_state(PrintRequest.waiting_for_requirements)


@router.message(PrintRequest.waiting_for_requirements)
async def ask_payment_method(message: Message, state: FSMContext):
    await state.update_data(requirements=message.text.strip())
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–æ–π", callback_data="pay_card")],
        [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_requirements")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    await state.set_state(PaymentState.choosing_payment_method)

@router.callback_query(F.data == "back_to_requirements")
async def back_to_requirements(call: CallbackQuery, state: FSMContext):
    await call.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–µ—á–∞—Ç–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.")
    await call.message.delete()
    await call.answer()
    await state.set_state(PrintRequest.waiting_for_requirements)


@router.callback_query(F.data == "pay_card")
async def handle_card_payment(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    total_price = data.get("total_price", 0)
    printer_id = data.get("printer_id")

    if not printer_id:
        await call.message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.")
        return

    printer_info = await get_printer_info(printer_id)

    if printer_info and printer_info.get("card_number"):
        card_number = printer_info["card_number"]
        await call.message.answer(f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π: {total_price} —Ä—É–±. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {card_number}")
    else:
        await call.message.answer("–ù–µ—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–∫–∞–∑–∞
    await state.update_data(payment_method="üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π")

    await send_order_to_printer(call, state, "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π")

@router.callback_query(F.data == "pay_cash")
async def ask_cash_amount(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤–Ω–µ—Å—ë—Ç–µ:")
    await state.set_state(PaymentState.entering_cash_amount)


@router.message(PaymentState.entering_cash_amount)
async def handle_cash_payment(message: Message, state: FSMContext):
    try:
        amount_given = float(message.text.replace(",", "."))
        data = await state.get_data()
        total_price = data.get("total_price", 0)

        if amount_given < total_price:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return

        change = round(float(amount_given) - float(total_price), 2)
        payment_info = f"üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏: {amount_given} —Ä—É–±.\nüí∞ –°–¥–∞—á–∞: {change} —Ä—É–±."

        await send_order_to_printer(message, state, payment_info)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ–º).")


async def send_order_to_printer(message: Message, state: FSMContext, payment_info: str):
    data = await state.get_data()
    document_list = data.get("documents", [])
    printer_id = data.get("printer_id")
    total_pages = data.get("total_pages", 0)
    total_price = data.get("total_price", 0)
    requirements = data.get("requirements", "–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.")

    user = message.from_user
    order_id = f"{user.id}_{int(time.time())}"

    # üìå –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    file_descriptions = "\n".join([
        f"üìÑ {doc['file_name']} - {doc['pages']} —Å—Ç—Ä. ({'–ß/–ë' if doc['print_type'] == 'bw' else '–¶–≤–µ—Ç'})"
        for doc in document_list
    ])

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{user.username or user.full_name}\n"
        f"üìÇ –§–∞–π–ª—ã: \n{file_descriptions}\n"
        f"üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n"
        f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n"
        f"üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements}\n"
        f"{payment_info}"
    )

    complete_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{user.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data=f"reject_order_{order_id}")]
        ]
    )

    try:
        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
        await message.bot.send_message(chat_id=printer_id, text=caption, reply_markup=complete_button)

        # ‚úÖ –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10
        batch_size = 10
        for i in range(0, len(document_list), batch_size):
            batch = document_list[i:i + batch_size]

            media_group = [
                {
                    "type": "document",
                    "media": doc["file_id"],
                    "caption": f"{doc['file_name']} ({'–ß/–ë' if doc['print_type'] == 'bw' else '–¶–≤–µ—Ç'})"
                }
                for doc in batch
            ]

            await message.bot.send_media_group(chat_id=printer_id, media=media_group)

        await message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.")

    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")

@router.callback_query(F.data.startswith("reject_order_"))
async def reject_order(call: CallbackQuery, state:FSMContext, bot: Bot):
    order_id = call.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
    user_id = int(order_id.split("_")[0])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑—á–∏–∫–∞

    try:
        await state.clear()
        await bot.send_message(user_id, "‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")
        await call.message.edit_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@router.callback_query(F.data.startswith("complete_"))
async def complete_task(call: CallbackQuery, state: FSMContext):
    try:
        user_id = int(call.data.split("_")[1])
        printer_id = call.message.chat.id
        room_number = await get_printer_room(printer_id) or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –≤ –õ–°"

        data = await state.get_data()
        total_pages = data.get("total_pages", 0)
        total_price = data.get("total_price", 0)

        await update_printer_stats(printer_id, total_pages, total_price)
        await state.clear()

        await call.message.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ {room_number} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏."
        )

        # üîπ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        rating_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚≠ê 1", callback_data=f"rate_{printer_id}_1"),
                 InlineKeyboardButton(text="‚≠ê 2", callback_data=f"rate_{printer_id}_2"),
                 InlineKeyboardButton(text="‚≠ê 3", callback_data=f"rate_{printer_id}_3"),
                 InlineKeyboardButton(text="‚≠ê 4", callback_data=f"rate_{printer_id}_4"),
                 InlineKeyboardButton(text="‚≠ê 5", callback_data=f"rate_{printer_id}_5")]
            ]
        )

        await call.message.bot.send_message(
            chat_id=user_id,
            text="üì¢ –û—Ü–µ–Ω–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=rating_keyboard
        )

        await call.message.edit_reply_markup(reply_markup=None)
        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

@router.callback_query(F.data.startswith("rate_"))
async def rate_printer(call: CallbackQuery, state: FSMContext):
    _, printer_id, rating = call.data.split("_")
    printer_id, rating = int(printer_id), int(rating)

    await state.update_data(printer_id=printer_id, rating=rating)
    await call.message.delete()
    await call.message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ:")
    await state.set_state(RatingState.waiting_for_comment)

@router.message(RatingState.waiting_for_comment)
async def save_review(message: Message, state: FSMContext):
    data = await state.get_data()
    printer_id = data["printer_id"]
    rating = data["rating"]
    comment = message.text

    await add_review(printer_id, message.from_user.id, rating, comment)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. üòä")
    await state.clear()

