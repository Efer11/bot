import logging
import fitz
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.callback import user_printer_selection
from database.database import get_printer_room, get_printer_info, add_review, get_average_rating

router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class PrintRequest(StatesGroup):
    waiting_for_requirements = State()


class PaymentState(StatesGroup):
    choosing_payment_method = State()
    entering_cash_amount = State()

class RatingState(StatesGroup):
    waiting_for_comment = State()

async def get_pdf_page_count(file_id, bot):
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_bytes = await bot.download_file(file_path)

        with fitz.open("pdf", file_bytes.read()) as doc:
            return len(doc)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        return 0


@router.message(F.document)
async def handle_document(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in user_printer_selection:
        await message.answer("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–∞.")
        return

    printer_id = user_printer_selection[user_id]
    printer_info = await get_printer_info(printer_id)

    if not printer_info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not message.document.file_name.lower().endswith(".pdf"):
        await message.answer("‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
        return

    page_count = await get_pdf_page_count(message.document.file_id, message.bot)
    if page_count == 0:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        return

    price_per_page = printer_info.get("price_per_page", 1)
    file_cost = round(page_count * price_per_page, 2)

    data = await state.get_data()
    documents = data.get("documents", [])
    total_pages = data.get("total_pages", 0)
    total_price = data.get("total_price", 0)

    documents.append(
        {"file_id": message.document.file_id, "file_name": message.document.file_name, "pages": page_count})
    total_pages += page_count
    total_price += file_cost

    await state.update_data(
        documents=documents,
        printer_id=printer_id,
        total_pages=total_pages,
        total_price=total_price
    )

    await message.answer(
        f"üìÑ –§–∞–π–ª `{message.document.file_name}` –ø—Ä–∏–Ω—è—Ç.\n"
        f"üìë –°—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–∞–π–ª–µ: {page_count}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞: {file_cost} —Ä—É–±.\n\n"
        f"üìä –û–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç:\n"
        f"üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n"
        f"üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª—ã, –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ—Ç."
    )

    await state.set_state(PrintRequest.waiting_for_requirements)


@router.message(PrintRequest.waiting_for_requirements)
async def ask_payment_method(message: Message, state: FSMContext):
    await state.update_data(requirements=message.text.strip())
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–æ–π", callback_data="pay_card")],
        [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    await state.set_state(PaymentState.choosing_payment_method)


@router.callback_query(F.data == "pay_card")
async def handle_card_payment(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    total_price = data.get("total_price", 0)
    printer_id = data.get("printer_id")
    if not printer_id:
        await call.message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.")
        return
    printer_info = await get_printer_info(printer_id)
    if printer_info and printer_info.get("card_number"):
        card_number = printer_info["card_number"]
        await call.message.answer(f"üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π: {total_price} —Ä—É–±. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {card_number}")
    else:
        await call.message.answer("–ù–µ—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")

    await send_order_to_printer(call, state, "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π")
    await state.clear()


@router.callback_query(F.data == "pay_cash")
async def ask_cash_amount(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤–Ω–µ—Å—ë—Ç–µ:")
    await state.set_state(PaymentState.entering_cash_amount)


@router.message(PaymentState.entering_cash_amount)
async def handle_cash_payment(message: Message, state: FSMContext):
    try:
        amount_given = float(message.text.replace(",", "."))
        data = await state.get_data()
        total_price = data.get("total_price", 0)

        if amount_given < total_price:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return

        change = round(float(amount_given) - float(total_price), 2)
        payment_info = f"üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏: {amount_given} —Ä—É–±.\nüí∞ –°–¥–∞—á–∞: {change} —Ä—É–±."

        await send_order_to_printer(message, state, payment_info)
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ–º).")


async def send_order_to_printer(message: Message, state: FSMContext, payment_info: str):
    data = await state.get_data()
    document_list = data.get("documents", [])
    printer_id = data.get("printer_id")
    total_pages = data.get("total_pages", 0)
    total_price = data.get("total_price", 0)
    requirements = data.get("requirements", "–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.")

    # –î–æ—Å—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ message
    user = message.from_user

    file_descriptions = "\n".join([f"üìÑ `{doc['file_name']}` - {doc['pages']} —Å—Ç—Ä." for doc in document_list])

    caption = (
        f"üìÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{user.username or user.full_name}\n"
        f"üìÇ –§–∞–π–ª—ã:\n{file_descriptions}\n"
        f"üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n"
        f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n"
        f"üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements}\n"
        f"{payment_info}"
    )

    complete_button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{user.id}")]]
    )

    try:
        if len(document_list) > 1:
            media_group = [{"type": "document", "media": doc["file_id"]} for doc in document_list]
            await message.bot.send_media_group(chat_id=printer_id, media=media_group)
            await message.bot.send_message(chat_id=printer_id, text=caption, reply_markup=complete_button)
        else:
            await message.bot.send_document(
                chat_id=printer_id,
                document=document_list[0]["file_id"],
                caption=caption,
                reply_markup=complete_button
            )

        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

@router.callback_query(F.data.startswith("complete_"))
async def complete_task(call: CallbackQuery, state: FSMContext):
    try:
        user_id = int(call.data.split("_")[1])
        printer_id = call.message.chat.id
        room_number = await get_printer_room(printer_id) or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –≤ –õ–°"

        await call.message.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ {room_number} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏."
        )

        # üîπ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        rating_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚≠ê 1", callback_data=f"rate_{printer_id}_1"),
                 InlineKeyboardButton(text="‚≠ê 2", callback_data=f"rate_{printer_id}_2"),
                 InlineKeyboardButton(text="‚≠ê 3", callback_data=f"rate_{printer_id}_3"),
                 InlineKeyboardButton(text="‚≠ê 4", callback_data=f"rate_{printer_id}_4"),
                 InlineKeyboardButton(text="‚≠ê 5", callback_data=f"rate_{printer_id}_5")]
            ]
        )

        await call.message.bot.send_message(
            chat_id=user_id,
            text="üì¢ –û—Ü–µ–Ω–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=rating_keyboard
        )

        await call.message.edit_reply_markup(reply_markup=None)
        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

@router.callback_query(F.data.startswith("rate_"))
async def rate_printer(call: CallbackQuery, state: FSMContext):
    _, printer_id, rating = call.data.split("_")
    printer_id, rating = int(printer_id), int(rating)

    await state.update_data(printer_id=printer_id, rating=rating)
    await call.message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ:")
    await state.set_state(RatingState.waiting_for_comment)

@router.message(RatingState.waiting_for_comment)
async def save_review(message: Message, state: FSMContext):
    data = await state.get_data()
    printer_id = data["printer_id"]
    rating = data["rating"]
    comment = message.text

    await add_review(printer_id, message.from_user.id, rating, comment)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. üòä")
    await state.clear()

