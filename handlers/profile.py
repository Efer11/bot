import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from database.database import get_printer_info, update_printer_info, update_printer_description, update_printer_type, get_average_rating, update_printer_price_per_page_color, get_reviews
from keyboards.inline import printer_type
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

profile_router = Router()


class EditProfileState(StatesGroup):
    changing_room = State()
    changing_price = State()
    changing_price_per_page_color = State()
    changing_description = State()
    add_printer_description = State()


@profile_router.message(Command("profile"))
async def take_profile(message: Message):
    await message.delete()
    printer_id = message.from_user.id

    try:
        info = await get_printer_info(printer_id)
        if not info:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å!")
            return

        avg_rating = await get_average_rating(printer_id)

        change_printer_info = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="change_room")],
                [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ –ª–∏—Å—Ç —á/–±", callback_data="change_price")],
                [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ –ª–∏—Å—Ç —Ü–≤–µ—Ç",
                                      callback_data="change_price_per_page_color")],
                [InlineKeyboardButton(text="üìå –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="change_description")],
                [InlineKeyboardButton(text="üñ® –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞", callback_data="add_printer_type")],
                [InlineKeyboardButton(text="üì¢ –ú–æ–∏ –æ—Ç–∑—ã–≤—ã", callback_data=f"my_reviews_{printer_id}_0")],
                [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
            ]
        )

        await message.answer(
            f"üë§ {info['full_name']}\n"
            f"üè† –ö–æ–º–Ω–∞—Ç–∞: {info['room_number']}\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Å—Ç —á/–±: {info['price_per_page']} —Ä—É–±.\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Å—Ç —Ü–≤–µ—Ç: {info['price_per_page_color']} —Ä—É–±.\n"
            f"üìå –û–ø–∏—Å–∞–Ω–∏–µ: {info['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üñ® –¢–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {info['printer_type'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating}",
            reply_markup=change_printer_info
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")


@profile_router.callback_query(F.data.startswith("my_reviews_"))
async def view_my_reviews(call: CallbackQuery):
    parts = call.data.split("_")

    if len(parts) < 3:
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    printer_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 0

    reviews = await get_reviews(printer_id)
    total_reviews = len(reviews)

    if total_reviews == 0:
        await call.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.", show_alert=True)
        return

    reviews_per_page = 3
    start_index = page * reviews_per_page
    end_index = start_index + reviews_per_page
    reviews_on_page = reviews[start_index:end_index]

    review_texts = []
    for review in reviews_on_page:
        stars = "‚≠ê" * review["rating"] + "‚òÜ" * (5 - review["rating"])
        comment = review["comment"] or "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        review_texts.append(f"{stars}\nüìù {comment}")

    reviews_text = "\n\n".join(review_texts)

    buttons = []
    if start_index > 0:
        buttons.append(InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"my_reviews_{printer_id}_{page - 1}"))
    if end_index < total_reviews:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂", callback_data=f"my_reviews_{printer_id}_{page + 1}"))

    buttons.append(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_reviews"))

    review_buttons = InlineKeyboardMarkup(inline_keyboard=[buttons])

    if call.message.text:
        await call.message.edit_text(f"üì¢ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n{reviews_text}", reply_markup=review_buttons)
    else:
        await call.message.answer(f"üì¢ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n{reviews_text}", reply_markup=review_buttons)


@profile_router.callback_query(F.data == "close_reviews")
async def close_reviews(call: CallbackQuery):
    await call.message.delete()
    await call.answer()

@profile_router.callback_query(F.data == "change_room")
async def change_room(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:")
    await state.set_state(EditProfileState.changing_room)
    await callback.answer()


@profile_router.callback_query(F.data == "change_price")
async def change_price(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –ª–∏—Å—Ç —á/–± (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.20):")
    await state.set_state(EditProfileState.changing_price)
    await callback.answer()

@profile_router.callback_query(F.data == "change_price_per_page_color")
async def change_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –ª–∏—Å—Ç —Ü–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.50):")
    await state.set_state(EditProfileState.changing_price_per_page_color)
    await callback.answer()

@profile_router.callback_query(F.data == "change_description")
async def change_description(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö —É—Å–ª—É–≥:")
    await state.set_state(EditProfileState.changing_description)
    await callback.answer()

@profile_router.callback_query(F.data == "add_printer_type")
async def change_printer_type(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:", reply_markup=printer_type)
    await callback.answer()

@profile_router.callback_query(F.data.startswith("printer_type_"))
async def set_printer_type(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    printer_types = {
        "printer_type_laser_bw": "–õ–∞–∑–µ—Ä–Ω—ã–π —á/–±",
        "printer_type_laser_color": "–õ–∞–∑–µ—Ä–Ω—ã–π —á/–± + —Ü–≤–µ—Ç",
        "printer_type_laser_bw_scan": "–õ–∞–∑–µ—Ä–Ω—ã–π —á/–± + —Å–∫–∞–Ω",
        "printer_type_laser_color_scan": "–õ–∞–∑–µ—Ä–Ω—ã–π —á/–± + —Ü–≤–µ—Ç + —Å–∫–∞–Ω",
        "printer_type_ink_bw": "–°—Ç—Ä—É–π–Ω—ã–π —á/–±",
        "printer_type_ink_color": "–°—Ç—Ä—É–π–Ω—ã–π —á/–± + —Ü–≤–µ—Ç",
        "printer_type_ink_bw_scan": "–°—Ç—Ä—É–π–Ω—ã–π —á/–± + —Å–∫–∞–Ω",
        "printer_type_ink_color_scan": "–°—Ç—Ä—É–π–Ω—ã–π —á/–± + —Ü–≤–µ—Ç + —Å–∫–∞–Ω"
    }

    printer_type = printer_types.get(callback.data, "–ù–µ —É–∫–∞–∑–∞–Ω")

    try:
        await update_printer_type(telegram_id=callback.from_user.id, printer_type=printer_type)
        await callback.message.answer(f"‚úÖ –¢–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {printer_type}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞.")

    await callback.answer()

@profile_router.message(EditProfileState.changing_room)
async def update_room_number(message: Message, state: FSMContext):
    new_room = message.text.strip()

    if not new_room:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    try:
        await update_printer_info(telegram_id=message.from_user.id, room_number=new_room)
        await message.answer(f"‚úÖ –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω: {new_room}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã.")

    await state.clear()


@profile_router.message(EditProfileState.changing_price)
async def update_price_per_page(message: Message, state: FSMContext):
    try:
        new_price = float(message.text.strip())
        if new_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        await update_printer_info(telegram_id=message.from_user.id, price_per_page=new_price)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_price} —Ä—É–±.")
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.50")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")

    await state.clear()

@profile_router.message(EditProfileState.changing_price_per_page_color)
async def update_price_per_page(message: Message, state: FSMContext):
    try:
        new_price_color = float(message.text.strip())
        if new_price_color <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        await update_printer_price_per_page_color(telegram_id=message.from_user.id, price_per_page_color=new_price_color)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∑–∞ –ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_price_color} —Ä—É–±.")
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.50")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")

    await state.clear()

@profile_router.message(EditProfileState.changing_description)
async def update_description(message: Message, state: FSMContext):
    new_description = message.text.strip()

    if not new_description:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    try:
        await update_printer_description(telegram_id=message.from_user.id, description=new_description)
        await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_description}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
    await state.clear()


@profile_router.callback_query(F.data == "close")
async def close(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
